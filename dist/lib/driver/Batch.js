"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Batch = void 0;
class Batch {
    constructor(pid, pointers) {
        this.pid = pid;
        this.pointers = pointers;
    }
    async readAsync() {
        if (!this.pointers.length)
            return;
        const request = this.pointers.map(x => `${x.address.toString(16)}:${x.bufferSize.toString(16)}`).join(',');
        const response = await fetch(`/api/proc/${this.pid}/mem/${request}`);
        const result = await response.arrayBuffer().then(x => new DataView(x));
        for (let i = 0; i < result.byteLength; i += 2) {
            const pi = result.getUint16(i, true);
            const size = this.pointers[pi].bufferSize;
            this.pointers[pi].buffer = new DataView(result.buffer, i + 2, size);
            i += size;
        }
    }
    async writeAsync() {
        if (!this.pointers.length)
            return;
        const body = await new Blob(this.pointers.map(x => x.buffer)).arrayBuffer();
        const request = this.pointers.map(x => `${x.address.toString(16)}:${x.bufferSize.toString(16)}`).join(',');
        await fetch(`/api/proc/${this.pid}/mem/${request}`, { body, method: 'PUT' });
    }
}
exports.Batch = Batch;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQmF0Y2guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbGliL2RyaXZlci9CYXRjaC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFFQSxNQUFhLEtBQUs7SUFDaEIsWUFDVyxHQUFXLEVBQ1gsUUFBNEI7UUFENUIsUUFBRyxHQUFILEdBQUcsQ0FBUTtRQUNYLGFBQVEsR0FBUixRQUFRLENBQW9CO0lBQUcsQ0FBQztJQUUzQyxLQUFLLENBQUMsU0FBUztRQUNiLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU07WUFBRSxPQUFPO1FBQ2xDLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzNHLE1BQU0sUUFBUSxHQUFHLE1BQU0sS0FBSyxDQUFDLGFBQWEsSUFBSSxDQUFDLEdBQUcsUUFBUSxPQUFPLEVBQUUsQ0FBQyxDQUFDO1FBQ3JFLE1BQU0sTUFBTSxHQUFHLE1BQU0sUUFBUSxDQUFDLFdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdkUsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxVQUFVLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUM3QyxNQUFNLEVBQUUsR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztZQUNyQyxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLFVBQVUsQ0FBQztZQUMxQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLE1BQU0sR0FBRyxJQUFJLFFBQVEsQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDcEUsQ0FBQyxJQUFJLElBQUksQ0FBQztTQUNYO0lBQ0gsQ0FBQztJQUVELEtBQUssQ0FBQyxVQUFVO1FBQ2QsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTTtZQUFFLE9BQU87UUFDbEMsTUFBTSxJQUFJLEdBQUcsTUFBTSxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQzVFLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzNHLE1BQU0sS0FBSyxDQUFDLGFBQWEsSUFBSSxDQUFDLEdBQUcsUUFBUSxPQUFPLEVBQUUsRUFBRSxFQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFDLENBQUMsQ0FBQztJQUM3RSxDQUFDO0NBQ0Y7QUF4QkQsc0JBd0JDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgYXBwIGZyb20gJy4uJztcblxuZXhwb3J0IGNsYXNzIEJhdGNoIHtcbiAgY29uc3RydWN0b3IoXG4gICAgcmVhZG9ubHkgcGlkOiBudW1iZXIsXG4gICAgcmVhZG9ubHkgcG9pbnRlcnM6IEFycmF5PGFwcC5Qb2ludGVyPikge31cblxuICBhc3luYyByZWFkQXN5bmMoKSB7XG4gICAgaWYgKCF0aGlzLnBvaW50ZXJzLmxlbmd0aCkgcmV0dXJuO1xuICAgIGNvbnN0IHJlcXVlc3QgPSB0aGlzLnBvaW50ZXJzLm1hcCh4ID0+IGAke3guYWRkcmVzcy50b1N0cmluZygxNil9OiR7eC5idWZmZXJTaXplLnRvU3RyaW5nKDE2KX1gKS5qb2luKCcsJyk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgL2FwaS9wcm9jLyR7dGhpcy5waWR9L21lbS8ke3JlcXVlc3R9YCk7XG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcmVzcG9uc2UuYXJyYXlCdWZmZXIoKS50aGVuKHggPT4gbmV3IERhdGFWaWV3KHgpKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJlc3VsdC5ieXRlTGVuZ3RoOyBpICs9IDIpIHtcbiAgICAgIGNvbnN0IHBpID0gcmVzdWx0LmdldFVpbnQxNihpLCB0cnVlKTtcbiAgICAgIGNvbnN0IHNpemUgPSB0aGlzLnBvaW50ZXJzW3BpXS5idWZmZXJTaXplO1xuICAgICAgdGhpcy5wb2ludGVyc1twaV0uYnVmZmVyID0gbmV3IERhdGFWaWV3KHJlc3VsdC5idWZmZXIsIGkgKyAyLCBzaXplKTtcbiAgICAgIGkgKz0gc2l6ZTtcbiAgICB9XG4gIH1cblxuICBhc3luYyB3cml0ZUFzeW5jKCkge1xuICAgIGlmICghdGhpcy5wb2ludGVycy5sZW5ndGgpIHJldHVybjtcbiAgICBjb25zdCBib2R5ID0gYXdhaXQgbmV3IEJsb2IodGhpcy5wb2ludGVycy5tYXAoeCA9PiB4LmJ1ZmZlcikpLmFycmF5QnVmZmVyKCk7XG4gICAgY29uc3QgcmVxdWVzdCA9IHRoaXMucG9pbnRlcnMubWFwKHggPT4gYCR7eC5hZGRyZXNzLnRvU3RyaW5nKDE2KX06JHt4LmJ1ZmZlclNpemUudG9TdHJpbmcoMTYpfWApLmpvaW4oJywnKTtcbiAgICBhd2FpdCBmZXRjaChgL2FwaS9wcm9jLyR7dGhpcy5waWR9L21lbS8ke3JlcXVlc3R9YCwge2JvZHksIG1ldGhvZDogJ1BVVCd9KTtcbiAgfVxufVxuIl19