"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Player = void 0;
const app = require("..");
const playerOffsets_1 = require("./offsets/playerOffsets");
class Player extends app.Entity {
    constructor(address, isLocal, lifeState = new app.UInt8Pointer(address + playerOffsets_1.playerOffsets.lifeState), shieldHealth = new app.UInt8Pointer(address + playerOffsets_1.playerOffsets.shieldHealth), shieldHealthMax = new app.UInt8Pointer(address + playerOffsets_1.playerOffsets.shieldHealthMax), health = new app.UInt8Pointer(address + playerOffsets_1.playerOffsets.iHealth), healthMax = new app.UInt8Pointer(address + playerOffsets_1.playerOffsets.iMaxHealth), viewAngles = new app.VectorPointer(address + playerOffsets_1.playerOffsets.viewAngles), cameraPos = new app.VectorPointer(address + playerOffsets_1.playerOffsets.cameraPos), bleedoutState = new app.UInt8Pointer(address + playerOffsets_1.playerOffsets.bleedoutState)) {
        super(address);
        this.isLocal = isLocal;
        this.lifeState = lifeState;
        this.shieldHealth = shieldHealth;
        this.shieldHealthMax = shieldHealthMax;
        this.health = health;
        this.healthMax = healthMax;
        this.viewAngles = viewAngles;
        this.cameraPos = cameraPos;
        this.bleedoutState = bleedoutState;
    }
    get isValid() {
        return this.name.value
            && !this.lifeState.value
            && !app.shallowEquals(this.localOrigin.value, new app.Vector(0, 0, 0));
    }
    get bodyPos() {
        var v = this.localOrigin.value;
        const HEADOFFSET = 35;
        v.z += HEADOFFSET - 5;
        return v;
    }
    createColor(otherPlayer, mode) {
        if (!this.isLocal && !this.bleedoutState.value && !this.isSameTeam(otherPlayer, mode)) {
            if (this.shieldHealth.value < Math.floor(this.shieldHealthMax.value / 3) && this.health.value < Math.floor(this.healthMax.value / 3)) {
                return '#FFFF00';
            }
            else if (this.shieldHealthMax.value == 50) {
                return '#FFCCFF';
            }
            else if (this.shieldHealthMax.value == 75) {
                return '#00FFFF';
            }
            else if (this.shieldHealthMax.value == 100) {
                return '#FF00FF';
            }
            else if (this.shieldHealthMax.value == 125) {
                return '#FF0000';
            }
            else {
                return '#FFCCFF';
            }
        }
        else {
            return this.isLocal ? '#0000FF' : this.isSameTeam(otherPlayer, mode)
                ? (this.bleedoutState.value ? '#FFFF00' : '#00FF00')
                : (this.bleedoutState.value ? '#FFA500' : '#FF0000');
        }
    }
    isSameTeam(otherPlayer, mode) {
        switch (mode) {
            case 'control':
                return this.teamNum.value % 2 === otherPlayer.teamNum.value % 2;
            default:
                return this.teamNum.value === otherPlayer.teamNum.value;
        }
    }
    toString() {
        return app.serialize(this);
    }
}
exports.Player = Player;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUGxheWVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2xpYi9jb3JlL1BsYXllci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSwwQkFBMEI7QUFDMUIsMkRBQXNEO0FBQ3RELE1BQWEsTUFBTyxTQUFRLEdBQUcsQ0FBQyxNQUFNO0lBQ3BDLFlBQVksT0FBZSxFQUNoQixPQUFnQixFQUNoQixZQUFZLElBQUksR0FBRyxDQUFDLFlBQVksQ0FBQyxPQUFPLEdBQUcsNkJBQWEsQ0FBQyxTQUFTLENBQUMsRUFDbkUsZUFBZSxJQUFJLEdBQUcsQ0FBQyxZQUFZLENBQUMsT0FBTyxHQUFHLDZCQUFhLENBQUMsWUFBWSxDQUFDLEVBQ3pFLGtCQUFrQixJQUFJLEdBQUcsQ0FBQyxZQUFZLENBQUMsT0FBTyxHQUFHLDZCQUFhLENBQUMsZUFBZSxDQUFDLEVBQy9FLFNBQVMsSUFBSSxHQUFHLENBQUMsWUFBWSxDQUFDLE9BQU8sR0FBRyw2QkFBYSxDQUFDLE9BQU8sQ0FBQyxFQUM5RCxZQUFZLElBQUksR0FBRyxDQUFDLFlBQVksQ0FBQyxPQUFPLEdBQUcsNkJBQWEsQ0FBQyxVQUFVLENBQUMsRUFDcEUsYUFBYSxJQUFJLEdBQUcsQ0FBQyxhQUFhLENBQUMsT0FBTyxHQUFHLDZCQUFhLENBQUMsVUFBVSxDQUFDLEVBQ3RFLFlBQVksSUFBSSxHQUFHLENBQUMsYUFBYSxDQUFDLE9BQU8sR0FBRyw2QkFBYSxDQUFDLFNBQVMsQ0FBQyxFQUNwRSxnQkFBZ0IsSUFBSSxHQUFHLENBQUMsWUFBWSxDQUFDLE9BQU8sR0FBRyw2QkFBYSxDQUFDLGFBQWEsQ0FBQztRQUNwRixLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7UUFUTixZQUFPLEdBQVAsT0FBTyxDQUFTO1FBQ2hCLGNBQVMsR0FBVCxTQUFTLENBQTBEO1FBQ25FLGlCQUFZLEdBQVosWUFBWSxDQUE2RDtRQUN6RSxvQkFBZSxHQUFmLGVBQWUsQ0FBZ0U7UUFDL0UsV0FBTSxH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LEtBQUssQ0FBQztTQUMzRDtJQUNILENBQUM7SUFDRCxRQUFRO1FBQ04sT0FBTyxHQUFHLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzdCLENBQUM7Q0FDRjtBQTFERCx3QkEwREMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBhcHAgZnJvbSAnLi4nO1xuaW1wb3J0IHtwbGF5ZXJPZmZzZXRzfSBmcm9tICcuL29mZnNldHMvcGxheWVyT2Zmc2V0cyc7XG5leHBvcnQgY2xhc3MgUGxheWVyIGV4dGVuZHMgYXBwLkVudGl0eSB7XG4gIGNvbnN0cnVjdG9yKGFkZHJlc3M6IGJpZ2ludCxcbiAgICByZWFkb25seSBpc0xvY2FsOiBib29sZWFuLFxuICAgIHJlYWRvbmx5IGxpZmVTdGF0ZSA9IG5ldyBhcHAuVUludDhQb2ludGVyKGFkZHJlc3MgKyBwbGF5ZXJPZmZzZXRzLmxpZmVTdGF0ZSksXG4gICAgcmVhZG9ubHkgc2hpZWxkSGVhbHRoID0gbmV3IGFwcC5VSW50OFBvaW50ZXIoYWRkcmVzcyArIHBsYXllck9mZnNldHMuc2hpZWxkSGVhbHRoKSxcbiAgICByZWFkb25seSBzaGllbGRIZWFsdGhNYXggPSBuZXcgYXBwLlVJbnQ4UG9pbnRlcihhZGRyZXNzICsgcGxheWVyT2Zmc2V0cy5zaGllbGRIZWFsdGhNYXgpLFxuICAgIHJlYWRvbmx5IGhlYWx0aCA9IG5ldyBhcHAuVUludDhQb2ludGVyKGFkZHJlc3MgKyBwbGF5ZXJPZmZzZXRzLmlIZWFsdGgpLFxuICAgIHJlYWRvbmx5IGhlYWx0aE1heCA9IG5ldyBhcHAuVUludDhQb2ludGVyKGFkZHJlc3MgKyBwbGF5ZXJPZmZzZXRzLmlNYXhIZWFsdGgpLFxuICAgIHJlYWRvbmx5IHZpZXdBbmdsZXMgPSBuZXcgYXBwLlZlY3RvclBvaW50ZXIoYWRkcmVzcyArIHBsYXllck9mZnNldHMudmlld0FuZ2xlcyksXG4gICAgcmVhZG9ubHkgY2FtZXJhUG9zID0gbmV3IGFwcC5WZWN0b3JQb2ludGVyKGFkZHJlc3MgKyBwbGF5ZXJPZmZzZXRzLmNhbWVyYVBvcyksXG4gICAgcmVhZG9ubHkgYmxlZWRvdXRTdGF0ZSA9IG5ldyBhcHAuVUludDhQb2ludGVyKGFkZHJlc3MgKyBwbGF5ZXJPZmZzZXRzLmJsZWVkb3V0U3RhdGUpKSB7XG4gICAgc3VwZXIoYWRkcmVzcyk7XG4gIH1cbiAgXG4gIGdldCBpc1ZhbGlkKCkge1xuICAgIHJldHVybiB0aGlzLm5hbWUudmFsdWVcbiAgICAgICYmICF0aGlzLmxpZmVTdGF0ZS52YWx1ZVxuICAgICAgJiYgIWFwcC5zaGFsbG93RXF1YWxzKHRoaXMubG9jYWxPcmlnaW4udmFsdWUsIG5ldyBhcHAuVmVjdG9yKDAsIDAsIDApKTtcbiAgfVxuICBnZXQgYm9keVBvcygpIHtcbiAgICB2YXIgdiA9IHRoaXMubG9jYWxPcmlnaW4udmFsdWU7XG4gICAgY29uc3QgSEVBRE9GRlNFVCA9IDM1O1xuICAgIHYueiArPSBIRUFET0ZGU0VUIC0gNTtcbiAgICByZXR1cm4gdjtcbiAgfVxuICBjcmVhdGVDb2xvcihvdGhlclBsYXllcjogYXBwLlBsYXllciwgbW9kZT86IHN0cmluZykge1xuICAgIGlmKCF0aGlzLmlzTG9jYWwgJiYgIXRoaXMuYmxlZWRvdXRTdGF0ZS52YWx1ZSAmJiAhdGhpcy5pc1NhbWVUZWFtKG90aGVyUGxheWVyLCBtb2RlKSl7XG4gICAgICBpZih0aGlzLnNoaWVsZEhlYWx0aC52YWx1ZSA8IE1hdGguZmxvb3IodGhpcy5zaGllbGRIZWFsdGhNYXgudmFsdWUvMykgJiYgdGhpcy5oZWFsdGgudmFsdWUgPCBNYXRoLmZsb29yKHRoaXMuaGVhbHRoTWF4LnZhbHVlLzMpKXtcbiAgICAgICAgIHJldHVybiAnI0ZGRkYwMCc7XG4gICAgICAgfWVsc2UgaWYodGhpcy5zaGllbGRIZWFsdGhNYXgudmFsdWUgPT0gNTApe1xuICAgICAgICAgIHJldHVybiAnI0ZGQ0NGRic7XG4gICAgICAgfWVsc2UgaWYodGhpcy5zaGllbGRIZWFsdGhNYXgudmFsdWUgPT0gNzUpeyBcbiAgICAgICAgIHJldHVybiAnIzAwRkZGRic7XG4gICAgICAgfWVsc2UgaWYodGhpcy5zaGllbGRIZWFsdGhNYXgudmFsdWUgPT0gMTAwKXsgXG4gICAgICAgICByZXR1cm4gJyNGRjAwRkYnO1xuICAgICAgIH1lbHNlIGlmKHRoaXMuc2hpZWxkSGVhbHRoTWF4LnZhbHVlID09IDEyNSl7XG4gICAgICAgICByZXR1cm4gJyNGRjAwMDAnO1xuICAgICAgIH1lbHNle1xuICAgICAgICAgcmV0dXJuICcjRkZDQ0ZGJztcbiAgICAgICB9XG4gICAgICBcbiAgICB9ZWxzZXtcbiAgICAgIHJldHVybiB0aGlzLmlzTG9jYWwgPyAnIzAwMDBGRicgOiB0aGlzLmlzU2FtZVRlYW0ob3RoZXJQbGF5ZXIsIG1vZGUpXG4gICAgICAgID8gKHRoaXMuYmxlZWRvdXRTdGF0ZS52YWx1ZSA/ICcjRkZGRjAwJyA6ICcjMDBGRjAwJylcbiAgICAgICAgOiAodGhpcy5ibGVlZG91dFN0YXRlLnZhbHVlID8gJyNGRkE1MDAnIDogJyNGRjAwMDAnKTtcbiAgICB9XG4gIH1cbiAgaXNTYW1lVGVhbShvdGhlclBsYXllcjogYXBwLlBsYXllciwgbW9kZT86IHN0cmluZykge1xuICAgIHN3aXRjaCAobW9kZSkge1xuICAgICAgY2FzZSAnY29udHJvbCc6XG4gICAgICAgIHJldHVybiB0aGlzLnRlYW1OdW0udmFsdWUgJSAyID09PSBvdGhlclBsYXllci50ZWFtTnVtLnZhbHVlICUgMjtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiB0aGlzLnRlYW1OdW0udmFsdWUgPT09IG90aGVyUGxheWVyLnRlYW1OdW0udmFsdWU7XG4gICAgfVxuICB9XG4gIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiBhcHAuc2VyaWFsaXplKHRoaXMpO1xuICB9XG59XG4iXX0=