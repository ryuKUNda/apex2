"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Player = void 0;
const app = require("..");
const playerOffsets_1 = require("./offsets/playerOffsets");
class Player extends app.Entity {
    constructor(address, isLocal, lifeState = new app.UInt8Pointer(address + playerOffsets_1.playerOffsets.lifeState), shieldHealth = new app.UInt8Pointer(address + playerOffsets_1.playerOffsets.shieldHealth), shieldHealthMax = new app.UInt8Pointer(address + playerOffsets_1.playerOffsets.shieldHealthMax), health = new app.UInt8Pointer(address + playerOffsets_1.playerOffsets.iHealth), healthMax = new app.UInt8Pointer(address + playerOffsets_1.playerOffsets.iMaxHealth), viewAngles = new app.VectorPointer(address + playerOffsets_1.playerOffsets.viewAngles), bleedoutState = new app.UInt8Pointer(address + playerOffsets_1.playerOffsets.bleedoutState)) {
        super(address);
        this.isLocal = isLocal;
        this.lifeState = lifeState;
        this.shieldHealth = shieldHealth;
        this.shieldHealthMax = shieldHealthMax;
        this.health = health;
        this.healthMax = healthMax;
        this.viewAngles = viewAngles;
        this.bleedoutState = bleedoutState;
    }
    get isValid() {
        return this.name.value
            && !this.lifeState.value
            && !app.shallowEquals(this.localOrigin.value, new app.Vector(0, 0, 0));
    }
    createColor(otherPlayer, mode) {
        if (!this.isLocal && !this.bleedoutState.value && !this.isSameTeam(otherPlayer, mode)) {
            if (this.shieldHealth.value < Math.floor(this.shieldHealthMax.value / 3) && this.health.value < Math.floor(this.healthMax.value / 3)) {
                return '#FFFF00';
            }
            else if (this.shieldHealthMax.value == 50) {
                return '#FFCCFF';
            }
            else if (this.shieldHealthMax.value == 75) {
                return '#00FFFF';
            }
            else if (this.shieldHealthMax.value == 100) {
                return '#FF00FF';
            }
            else if (this.shieldHealthMax.value == 125) {
                return '#FF0000';
            }
            else {
                return '#FFCCFF';
            }
        }
        else {
            return this.isLocal ? '#0000FF' : this.isSameTeam(otherPlayer, mode)
                ? (this.bleedoutState.value ? '#FFFF00' : '#00FF00')
                : (this.bleedoutState.value ? '#FFA500' : '#FF0000');
        }
    }
    isSameTeam(otherPlayer, mode) {
        switch (mode) {
            case 'control':
                return this.teamNum.value % 2 === otherPlayer.teamNum.value % 2;
            default:
                return this.teamNum.value === otherPlayer.teamNum.value;
        }
    }
    toString() {
        return app.serialize(this);
    }
}
exports.Player = Player;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUGxheWVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2xpYi9jb3JlL1BsYXllci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSwwQkFBMEI7QUFDMUIsMkRBQXNEO0FBQ3RELE1BQWEsTUFBTyxTQUFRLEdBQUcsQ0FBQyxNQUFNO0lBQ3BDLFlBQVksT0FBZSxFQUNoQixPQUFnQixFQUNoQixZQUFZLElBQUksR0FBRyxDQUFDLFlBQVksQ0FBQyxPQUFPLEdBQUcsNkJBQWEsQ0FBQyxTQUFTLENBQUMsRUFDbkUsZUFBZSxJQUFJLEdBQUcsQ0FBQyxZQUFZLENBQUMsT0FBTyxHQUFHLDZCQUFhLENBQUMsWUFBWSxDQUFDLEVBQ3pFLGtCQUFrQixJQUFJLEdBQUcsQ0FBQyxZQUFZLENBQUMsT0FBTyxHQUFHLDZCQUFhLENBQUMsZUFBZSxDQUFDLEVBQy9FLFNBQVMsSUFBSSxHQUFHLENBQUMsWUFBWSxDQUFDLE9BQU8sR0FBRyw2QkFBYSxDQUFDLE9BQU8sQ0FBQyxFQUM5RCxZQUFZLElBQUksR0FBRyxDQUFDLFlBQVksQ0FBQyxPQUFPLEdBQUcsNkJBQWEsQ0FBQyxVQUFVLENBQUMsRUFDcEUsYUFBYSxJQUFJLEdBQUcsQ0FBQyxhQUFhLENBQUMsT0FBTyxHQUFHLDZCQUFhLENBQUMsVUFBVSxDQUFDLEVBQ3RFLGdCQUFnQixJQUFJLEdBQUcsQ0FBQyxZQUFZLENBQUMsT0FBTyxHQUFHLDZCQUFhLENBQUMsYUFBYSxDQUFDO1FBQ3BGLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztRQVJOLFlBQU8sR0FBUCxPQUFPLENBQVM7UUFDaEIsY0FBUyxHQUFULFNBQVMsQ0FBMEQ7UUFDbkUsaUJBQVksR0FBWixZQUFZLENBQTZEO1FBQ3pFLG9CQUFlLEdBQWYsZUFBZSxDQUFnRTtRQUMvRSxXQUFNLEdBQU4sTUFBTSxDQUF3RDtRQUM5RCxjQUFTLEdBQVQsU0FBUyxDQUEyRDtRQUNwRSxlQUFVLEdBQVYsVUFBVSxDQUE0RDtRQUN0RSxrQkFBYSxHQUFiLGFBQWEsQ0FBOEQ7SUFFdEYsQ0FBQztJQUVELElBQUksT0FBTztRQUNULE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLO2VBQ2pCLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLO2VBQ3JCLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssRUFBRSxJQUFJLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzNFLENBQUM7SUFFRCxXQUFXLENBQUMsV0FBdUIsRUFBRSxJQUFhO1FBQ2hELElBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsRUFBQztZQUNuRixJQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxLQUFLLEdBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssR0FBQyxDQUFDLENBQUMsRUFBQztnQkFDN0gsT0FBTyxTQUFTLENBQUM7YUFDbEI7aUJBQUssSUFBRyxJQUFJLENBQUMsZUFBZSxDQUFDLEtBQUssSUFBSSxFQUFFLEVBQUM7Z0JBQ3ZDLE9BQU8sU0FBUyxDQUFDO2FBQ25CO2lCQUFLLElBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxLQUFLLElBQUksRUFBRSxFQUFDO2dCQUN4QyxPQUFPLFNBQVMsQ0FBQzthQUNsQjtpQkFBSyxJQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsS0FBSyxJQUFJLEdBQUcsRUFBQztnQkFDekMsT0FBTyxTQUFTLENBQUM7YUFDbEI7aUJBQUssSUFBRyxJQUFJLENBQUMsZUFBZSxDQUFDLEtBQUssSUFBSSxHQUFHLEVBQUM7Z0JBQ3pDLE9BQU8sU0FBUyxDQUFDO2FBQ2xCO2lCQUFJO2dCQUNILE9BQU8sU0FBUyxDQUFDO2FBQ2xCO1NBRUg7YUFBSTtZQUNILE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUM7Z0JBQ2xFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQztnQkFDcEQsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUM7U0FDeEQ7SUFDSCxDQUFDO0lBQ0QsVUFBVSxDQUFDLFdBQXVCLEVBQUUsSUFBYTtRQUMvQyxRQUFRLElBQUksRUFBRTtZQUNaLEtBQUssU0FBUztnQkFDWixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxHQUFHLENBQUMsS0FBSyxXQUFXLENBQUMsT0FBTyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUM7WUFDbEU7Z0JBQ0UsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssS0FBSyxXQUFXLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQztTQUMzRDtJQUNILENBQUM7SUFDRCxRQUFRO1FBQ04sT0FBTyxHQUFHLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzdCLENBQUM7Q0FDRjtBQXBERCx3QkFvREMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBhcHAgZnJvbSAnLi4nO1xuaW1wb3J0IHtwbGF5ZXJPZmZzZXRzfSBmcm9tICcuL29mZnNldHMvcGxheWVyT2Zmc2V0cyc7XG5leHBvcnQgY2xhc3MgUGxheWVyIGV4dGVuZHMgYXBwLkVudGl0eSB7XG4gIGNvbnN0cnVjdG9yKGFkZHJlc3M6IGJpZ2ludCxcbiAgICByZWFkb25seSBpc0xvY2FsOiBib29sZWFuLFxuICAgIHJlYWRvbmx5IGxpZmVTdGF0ZSA9IG5ldyBhcHAuVUludDhQb2ludGVyKGFkZHJlc3MgKyBwbGF5ZXJPZmZzZXRzLmxpZmVTdGF0ZSksXG4gICAgcmVhZG9ubHkgc2hpZWxkSGVhbHRoID0gbmV3IGFwcC5VSW50OFBvaW50ZXIoYWRkcmVzcyArIHBsYXllck9mZnNldHMuc2hpZWxkSGVhbHRoKSxcbiAgICByZWFkb25seSBzaGllbGRIZWFsdGhNYXggPSBuZXcgYXBwLlVJbnQ4UG9pbnRlcihhZGRyZXNzICsgcGxheWVyT2Zmc2V0cy5zaGllbGRIZWFsdGhNYXgpLFxuICAgIHJlYWRvbmx5IGhlYWx0aCA9IG5ldyBhcHAuVUludDhQb2ludGVyKGFkZHJlc3MgKyBwbGF5ZXJPZmZzZXRzLmlIZWFsdGgpLFxuICAgIHJlYWRvbmx5IGhlYWx0aE1heCA9IG5ldyBhcHAuVUludDhQb2ludGVyKGFkZHJlc3MgKyBwbGF5ZXJPZmZzZXRzLmlNYXhIZWFsdGgpLFxuICAgIHJlYWRvbmx5IHZpZXdBbmdsZXMgPSBuZXcgYXBwLlZlY3RvclBvaW50ZXIoYWRkcmVzcyArIHBsYXllck9mZnNldHMudmlld0FuZ2xlcyksXG4gICAgcmVhZG9ubHkgYmxlZWRvdXRTdGF0ZSA9IG5ldyBhcHAuVUludDhQb2ludGVyKGFkZHJlc3MgKyBwbGF5ZXJPZmZzZXRzLmJsZWVkb3V0U3RhdGUpKSB7XG4gICAgc3VwZXIoYWRkcmVzcyk7XG4gIH1cbiAgXG4gIGdldCBpc1ZhbGlkKCkge1xuICAgIHJldHVybiB0aGlzLm5hbWUudmFsdWVcbiAgICAgICYmICF0aGlzLmxpZmVTdGF0ZS52YWx1ZVxuICAgICAgJiYgIWFwcC5zaGFsbG93RXF1YWxzKHRoaXMubG9jYWxPcmlnaW4udmFsdWUsIG5ldyBhcHAuVmVjdG9yKDAsIDAsIDApKTtcbiAgfVxuICBcbiAgY3JlYXRlQ29sb3Iob3RoZXJQbGF5ZXI6IGFwcC5QbGF5ZXIsIG1vZGU/OiBzdHJpbmcpIHtcbiAgICBpZighdGhpcy5pc0xvY2FsICYmICF0aGlzLmJsZWVkb3V0U3RhdGUudmFsdWUgJiYgIXRoaXMuaXNTYW1lVGVhbShvdGhlclBsYXllciwgbW9kZSkpe1xuICAgICAgaWYodGhpcy5zaGllbGRIZWFsdGgudmFsdWUgPCBNYXRoLmZsb29yKHRoaXMuc2hpZWxkSGVhbHRoTWF4LnZhbHVlLzMpICYmIHRoaXMuaGVhbHRoLnZhbHVlIDwgTWF0aC5mbG9vcih0aGlzLmhlYWx0aE1heC52YWx1ZS8zKSl7XG4gICAgICAgICByZXR1cm4gJyNGRkZGMDAnO1xuICAgICAgIH1lbHNlIGlmKHRoaXMuc2hpZWxkSGVhbHRoTWF4LnZhbHVlID09IDUwKXtcbiAgICAgICAgICByZXR1cm4gJyNGRkNDRkYnO1xuICAgICAgIH1lbHNlIGlmKHRoaXMuc2hpZWxkSGVhbHRoTWF4LnZhbHVlID09IDc1KXsgXG4gICAgICAgICByZXR1cm4gJyMwMEZGRkYnO1xuICAgICAgIH1lbHNlIGlmKHRoaXMuc2hpZWxkSGVhbHRoTWF4LnZhbHVlID09IDEwMCl7IFxuICAgICAgICAgcmV0dXJuICcjRkYwMEZGJztcbiAgICAgICB9ZWxzZSBpZih0aGlzLnNoaWVsZEhlYWx0aE1heC52YWx1ZSA9PSAxMjUpe1xuICAgICAgICAgcmV0dXJuICcjRkYwMDAwJztcbiAgICAgICB9ZWxzZXtcbiAgICAgICAgIHJldHVybiAnI0ZGQ0NGRic7XG4gICAgICAgfVxuICAgICAgXG4gICAgfWVsc2V7XG4gICAgICByZXR1cm4gdGhpcy5pc0xvY2FsID8gJyMwMDAwRkYnIDogdGhpcy5pc1NhbWVUZWFtKG90aGVyUGxheWVyLCBtb2RlKVxuICAgICAgICA/ICh0aGlzLmJsZWVkb3V0U3RhdGUudmFsdWUgPyAnI0ZGRkYwMCcgOiAnIzAwRkYwMCcpXG4gICAgICAgIDogKHRoaXMuYmxlZWRvdXRTdGF0ZS52YWx1ZSA/ICcjRkZBNTAwJyA6ICcjRkYwMDAwJyk7XG4gICAgfVxuICB9XG4gIGlzU2FtZVRlYW0ob3RoZXJQbGF5ZXI6IGFwcC5QbGF5ZXIsIG1vZGU/OiBzdHJpbmcpIHtcbiAgICBzd2l0Y2ggKG1vZGUpIHtcbiAgICAgIGNhc2UgJ2NvbnRyb2wnOlxuICAgICAgICByZXR1cm4gdGhpcy50ZWFtTnVtLnZhbHVlICUgMiA9PT0gb3RoZXJQbGF5ZXIudGVhbU51bS52YWx1ZSAlIDI7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gdGhpcy50ZWFtTnVtLnZhbHVlID09PSBvdGhlclBsYXllci50ZWFtTnVtLnZhbHVlO1xuICAgIH1cbiAgfVxuICB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gYXBwLnNlcmlhbGl6ZSh0aGlzKTtcbiAgfVxufVxuIl19