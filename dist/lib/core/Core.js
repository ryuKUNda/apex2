"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Core = void 0;
const app = require("..");
const coreOffsets_1 = require("./offsets/coreOffsets");
const maxPlayers = Array(60).fill(0).map((_, i) => i);
class Core {
    constructor(process, region) {
        this.process = process;
        this.region = region;
    }
    static async createAsync(server) {
        const processes = await server.processesAsync();
        const targetProcess = processes.find(x => x.command.toLowerCase().endsWith('r5apex.exe'));
        if (!targetProcess)
            throw new Error('Invalid process!');
        const regions = await targetProcess.regionsAsync();
        const targetRegion = regions.find(x => x.pathname.toLowerCase().endsWith('r5apex.exe'))
            ?? regions.find(x => x.perms == 0x1 && x.pathname.startsWith('/memfd'))
            ?? regions.find(x => x.start === BigInt(0x140000000));
        if (!targetRegion)
            throw new Error('Invalid region!');
        return new Core(targetProcess, targetRegion);
    }
    async levelNameAsync() {
        const levelNamePointer = new app.CStringPointer(this.region.start + coreOffsets_1.coreOffsets.levelName, 32);
        await this.process.batch(levelNamePointer).readAsync();
        return levelNamePointer.value;
    }
    async playersAsync() {
        const localPlayerPointer = new app.UInt64Pointer(this.region.start + coreOffsets_1.coreOffsets.localPlayer);
        const playerPointers = maxPlayers.map(x => new app.UInt64Pointer(this.region.start + coreOffsets_1.coreOffsets.clEntityList + BigInt(x << 5)));
        await this.process.batch(localPlayerPointer, playerPointers).readAsync();
        const localPlayerAddress = localPlayerPointer.value;
        const playerAddresses = playerPointers.map(x => x.value).filter(Boolean);
        const players = playerAddresses.map(x => new app.Player(x, localPlayerAddress === x));
        await this.process.batch(pointersOf(players)).readAsync();
        return players.filter(x => x.isValid);
    }
}
exports.Core = Core;
function pointersOf(players) {
    return players.flatMap(x => Object.values(x).filter(y => y instanceof app.Pointer));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29yZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9saWIvY29yZS9Db3JlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDBCQUEwQjtBQUMxQix1REFBa0Q7QUFDbEQsTUFBTSxVQUFVLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUV0RCxNQUFhLElBQUk7SUFDZixZQUNXLE9BQW9CLEVBQ3BCLE1BQWtCO1FBRGxCLFlBQU8sR0FBUCxPQUFPLENBQWE7UUFDcEIsV0FBTSxHQUFOLE1BQU0sQ0FBWTtJQUFHLENBQUM7SUFFakMsTUFBTSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsTUFBa0I7UUFDekMsTUFBTSxTQUFTLEdBQUcsTUFBTSxNQUFNLENBQUMsY0FBYyxFQUFFLENBQUM7UUFDaEQsTUFBTSxhQUFhLEdBQUcsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7UUFDMUYsSUFBSSxDQUFDLGFBQWE7WUFBRSxNQUFNLElBQUksS0FBSyxDQUFDLGtCQUFrQixDQUFDLENBQUM7UUFDeEQsTUFBTSxPQUFPLEdBQUcsTUFBTSxhQUFhLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDbkQsTUFBTSxZQUFZLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsV0FBVyxFQUFFLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxDQUFDO2VBQ2xGLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxJQUFJLEdBQUcsSUFBSSxDQUFDLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQztlQUNwRSxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssS0FBSyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztRQUN4RCxJQUFJLENBQUMsWUFBWTtZQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMsaUJBQWlCLENBQUMsQ0FBQztRQUN0RCxPQUFPLElBQUksSUFBSSxDQUFDLGFBQWEsRUFBRSxZQUFZLENBQUMsQ0FBQztJQUMvQyxDQUFDO0lBRUQsS0FBSyxDQUFDLGNBQWM7UUFDbEIsTUFBTSxnQkFBZ0IsR0FBRyxJQUFJLEdBQUcsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEdBQUcseUJBQVcsQ0FBQyxTQUFTLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDL0YsTUFBTSxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQ3ZELE9BQU8sZ0JBQWdCLENBQUMsS0FBSyxDQUFDO0lBQ2hDLENBQUM7SUFFRCxLQUFLLENBQUMsWUFBWTtRQUNoQixNQUFNLGtCQUFrQixHQUFHLElBQUksR0FBRyxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssR0FBRyx5QkFBVyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQzlGLE1BQU0sY0FBYyxHQUFHLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEdBQUcseUJBQVcsQ0FBQyxZQUFZLEdBQUcsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDakksTUFBTSxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsRUFBRSxjQUFjLENBQUMsQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUN6RSxNQUFNLGtCQUFrQixHQUFHLGtCQUFrQixDQUFDLEtBQUssQ0FBQztRQUNwRCxNQUFNLGVBQWUsR0FBRyxjQUFjLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUN6RSxNQUFNLE9BQU8sR0FBRyxlQUFlLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxrQkFBa0IsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3RGLE1BQU0sSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDMUQsT0FBTyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3hDLENBQUM7Q0FDRjtBQWpDRCxvQkFpQ0M7QUFFRCxTQUFTLFVBQVUsQ0FBQyxPQUEwQjtJQUM1QyxPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsWUFBWSxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztBQUN0RixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgYXBwIGZyb20gJy4uJztcbmltcG9ydCB7Y29yZU9mZnNldHN9IGZyb20gJy4vb2Zmc2V0cy9jb3JlT2Zmc2V0cyc7XG5jb25zdCBtYXhQbGF5ZXJzID0gQXJyYXkoNjApLmZpbGwoMCkubWFwKChfLCBpKSA9PiBpKTtcblxuZXhwb3J0IGNsYXNzIENvcmUge1xuICBwcml2YXRlIGNvbnN0cnVjdG9yKFxuICAgIHJlYWRvbmx5IHByb2Nlc3M6IGFwcC5Qcm9jZXNzLFxuICAgIHJlYWRvbmx5IHJlZ2lvbjogYXBwLlJlZ2lvbikge31cblxuICBzdGF0aWMgYXN5bmMgY3JlYXRlQXN5bmMoc2VydmVyOiBhcHAuU2VydmVyKSB7XG4gICAgY29uc3QgcHJvY2Vzc2VzID0gYXdhaXQgc2VydmVyLnByb2Nlc3Nlc0FzeW5jKCk7XG4gICAgY29uc3QgdGFyZ2V0UHJvY2VzcyA9IHByb2Nlc3Nlcy5maW5kKHggPT4geC5jb21tYW5kLnRvTG93ZXJDYXNlKCkuZW5kc1dpdGgoJ3I1YXBleC5leGUnKSk7XG4gICAgaWYgKCF0YXJnZXRQcm9jZXNzKSB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgcHJvY2VzcyEnKTtcbiAgICBjb25zdCByZWdpb25zID0gYXdhaXQgdGFyZ2V0UHJvY2Vzcy5yZWdpb25zQXN5bmMoKTtcbiAgICBjb25zdCB0YXJnZXRSZWdpb24gPSByZWdpb25zLmZpbmQoeCA9PiB4LnBhdGhuYW1lLnRvTG93ZXJDYXNlKCkuZW5kc1dpdGgoJ3I1YXBleC5leGUnKSlcbiAgICAgID8/IHJlZ2lvbnMuZmluZCh4ID0+IHgucGVybXMgPT0gMHgxICYmIHgucGF0aG5hbWUuc3RhcnRzV2l0aCgnL21lbWZkJykpXG4gICAgICA/PyByZWdpb25zLmZpbmQoeCA9PiB4LnN0YXJ0ID09PSBCaWdJbnQoMHgxNDAwMDAwMDApKTtcbiAgICBpZiAoIXRhcmdldFJlZ2lvbikgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHJlZ2lvbiEnKTtcbiAgICByZXR1cm4gbmV3IENvcmUodGFyZ2V0UHJvY2VzcywgdGFyZ2V0UmVnaW9uKTtcbiAgfVxuXG4gIGFzeW5jIGxldmVsTmFtZUFzeW5jKCkge1xuICAgIGNvbnN0IGxldmVsTmFtZVBvaW50ZXIgPSBuZXcgYXBwLkNTdHJpbmdQb2ludGVyKHRoaXMucmVnaW9uLnN0YXJ0ICsgY29yZU9mZnNldHMubGV2ZWxOYW1lLCAzMik7XG4gICAgYXdhaXQgdGhpcy5wcm9jZXNzLmJhdGNoKGxldmVsTmFtZVBvaW50ZXIpLnJlYWRBc3luYygpO1xuICAgIHJldHVybiBsZXZlbE5hbWVQb2ludGVyLnZhbHVlO1xuICB9XG5cbiAgYXN5bmMgcGxheWVyc0FzeW5jKCkge1xuICAgIGNvbnN0IGxvY2FsUGxheWVyUG9pbnRlciA9IG5ldyBhcHAuVUludDY0UG9pbnRlcih0aGlzLnJlZ2lvbi5zdGFydCArIGNvcmVPZmZzZXRzLmxvY2FsUGxheWVyKTtcbiAgICBjb25zdCBwbGF5ZXJQb2ludGVycyA9IG1heFBsYXllcnMubWFwKHggPT4gbmV3IGFwcC5VSW50NjRQb2ludGVyKHRoaXMucmVnaW9uLnN0YXJ0ICsgY29yZU9mZnNldHMuY2xFbnRpdHlMaXN0ICsgQmlnSW50KHggPDwgNSkpKTtcbiAgICBhd2FpdCB0aGlzLnByb2Nlc3MuYmF0Y2gobG9jYWxQbGF5ZXJQb2ludGVyLCBwbGF5ZXJQb2ludGVycykucmVhZEFzeW5jKCk7XG4gICAgY29uc3QgbG9jYWxQbGF5ZXJBZGRyZXNzID0gbG9jYWxQbGF5ZXJQb2ludGVyLnZhbHVlO1xuICAgIGNvbnN0IHBsYXllckFkZHJlc3NlcyA9IHBsYXllclBvaW50ZXJzLm1hcCh4ID0+IHgudmFsdWUpLmZpbHRlcihCb29sZWFuKTtcbiAgICBjb25zdCBwbGF5ZXJzID0gcGxheWVyQWRkcmVzc2VzLm1hcCh4ID0+IG5ldyBhcHAuUGxheWVyKHgsIGxvY2FsUGxheWVyQWRkcmVzcyA9PT0geCkpO1xuICAgIGF3YWl0IHRoaXMucHJvY2Vzcy5iYXRjaChwb2ludGVyc09mKHBsYXllcnMpKS5yZWFkQXN5bmMoKTtcbiAgICByZXR1cm4gcGxheWVycy5maWx0ZXIoeCA9PiB4LmlzVmFsaWQpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHBvaW50ZXJzT2YocGxheWVyczogQXJyYXk8YXBwLlBsYXllcj4pOiBBcnJheTxhcHAuUG9pbnRlcj4ge1xuICByZXR1cm4gcGxheWVycy5mbGF0TWFwKHggPT4gT2JqZWN0LnZhbHVlcyh4KS5maWx0ZXIoeSA9PiB5IGluc3RhbmNlb2YgYXBwLlBvaW50ZXIpKTtcbn0iXX0=