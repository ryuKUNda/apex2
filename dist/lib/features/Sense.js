"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Sense = void 0;
const app = require("..");
class Sense {
    constructor(core, maximumDistance = 250) {
        this.core = core;
        this.maximumDistance = maximumDistance;
    }
    async updateAsync(localPlayer, players, mode) {
        const pointers = [];
        this.collectChanges(localPlayer, players, pointers, mode);
        await this.core.process.batch(pointers).writeAsync();
    }
    collectChanges(localPlayer, players, pointers, mode) {
        for (const x of players) {
            if (x.isLocal || [0, 255].includes(x.glowEnable.value))
                continue;
            const dx = (localPlayer.localOrigin.value.x - x.localOrigin.value.x) * 0.0254;
            const dy = (localPlayer.localOrigin.value.y - x.localOrigin.value.y) * 0.0254;
            const r = Math.sqrt(Math.pow(dx, 2) + Math.pow(dy, 2));
            if (r < this.maximumDistance) {
                const color = app.Color.parse(x.createColor(localPlayer, mode), 50);
                const type = new app.EntityGlow(101, 101, 46, 90);
                if (!app.shallowEquals(x.glowColor.value, color) || !app.shallowEquals(x.glowType.value, type) || x.glowEnable.value !== 1 || x.glowThroughWalls.value !== 2) {
                    x.glowColor.value = color;
                    x.glowType.value = type;
                    x.glowEnable.value = 1;
                    x.glowThroughWalls.value = 2;
                    x.ThirdPerson.value = 1;
                    x.ThirdPersona.value = 1;
                    x.ITEMGLOW.value = 1363184265;
                    pointers.push(x.glowColor, x.glowType, x.glowEnable, x.glowThroughWalls);
                }
            }
        }
    }
}
exports.Sense = Sense;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2Vuc2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbGliL2ZlYXR1cmVzL1NlbnNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDBCQUEwQjtBQUUxQixNQUFhLEtBQUs7SUFDaEIsWUFDbUIsSUFBYyxFQUNkLGtCQUFrQixHQUFHO1FBRHJCLFNBQUksR0FBSixJQUFJLENBQVU7UUFDZCxvQkFBZSxHQUFmLGVBQWUsQ0FBTTtJQUFHLENBQUM7SUFFNUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxXQUF1QixFQUFFLE9BQTBCLEVBQUUsSUFBYTtRQUNsRixNQUFNLFFBQVEsR0FBdUIsRUFBRSxDQUFDO1FBQ3hDLElBQUksQ0FBQyxjQUFjLENBQUMsV0FBVyxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDMUQsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsVUFBVSxFQUFFLENBQUM7SUFDdkQsQ0FBQztJQUVPLGNBQWMsQ0FBQyxXQUF1QixFQUFFLE9BQTBCLEVBQUUsUUFBNEIsRUFBRSxJQUFhO1FBQ3JILEtBQUssTUFBTSxDQUFDLElBQUksT0FBTyxFQUFFO1lBQ3ZCLElBQUksQ0FBQyxDQUFDLE9BQU8sSUFBSSxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUM7Z0JBQUUsU0FBUztZQUNqRSxNQUFNLEVBQUUsR0FBRyxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUM7WUFDOUUsTUFBTSxFQUFFLEdBQUcsQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDO1lBQzlFLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN2RCxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsZUFBZSxFQUFFO2dCQUM1QixNQUFNLEtBQUssR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztnQkFDcEUsTUFBTSxJQUFJLEdBQUcsSUFBSSxHQUFHLENBQUMsVUFBVSxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO2dCQUNsRCxJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLFVBQVUsQ0FBQyxLQUFLLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLEtBQUssQ0FBQyxFQUFFO29CQUM1SixDQUFDLENBQUMsU0FBUyxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7b0JBQzFCLENBQUMsQ0FBQyxRQUFRLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztvQkFDeEIsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO29CQUN2QixDQUFDLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQztvQkFDN0IsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO29CQUN4QixDQUFDLENBQUMsWUFBWSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUM7b0JBQ3pCLENBQUMsQ0FBQyxRQUFRLENBQUMsS0FBSyxHQUFFLFVBQVUsQ0FBQztvQkFDN0IsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztpQkFDMUU7YUFDRjtTQUNGO0lBQ0gsQ0FBQztDQUNGO0FBakNELHNCQWlDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGFwcCBmcm9tICcuLic7XG5cbmV4cG9ydCBjbGFzcyBTZW5zZSB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgcmVhZG9ubHkgY29yZTogYXBwLkNvcmUsXG4gICAgcHJpdmF0ZSByZWFkb25seSBtYXhpbXVtRGlzdGFuY2UgPSAyNTApIHt9XG5cbiAgYXN5bmMgdXBkYXRlQXN5bmMobG9jYWxQbGF5ZXI6IGFwcC5QbGF5ZXIsIHBsYXllcnM6IEFycmF5PGFwcC5QbGF5ZXI+LCBtb2RlPzogc3RyaW5nKSB7XG4gICAgY29uc3QgcG9pbnRlcnM6IEFycmF5PGFwcC5Qb2ludGVyPiA9IFtdO1xuICAgIHRoaXMuY29sbGVjdENoYW5nZXMobG9jYWxQbGF5ZXIsIHBsYXllcnMsIHBvaW50ZXJzLCBtb2RlKTtcbiAgICBhd2FpdCB0aGlzLmNvcmUucHJvY2Vzcy5iYXRjaChwb2ludGVycykud3JpdGVBc3luYygpOyAgXG4gIH1cblxuICBwcml2YXRlIGNvbGxlY3RDaGFuZ2VzKGxvY2FsUGxheWVyOiBhcHAuUGxheWVyLCBwbGF5ZXJzOiBBcnJheTxhcHAuUGxheWVyPiwgcG9pbnRlcnM6IEFycmF5PGFwcC5Qb2ludGVyPiwgbW9kZT86IHN0cmluZykge1xuICAgIGZvciAoY29uc3QgeCBvZiBwbGF5ZXJzKSB7XG4gICAgICBpZiAoeC5pc0xvY2FsIHx8IFswLCAyNTVdLmluY2x1ZGVzKHguZ2xvd0VuYWJsZS52YWx1ZSkpIGNvbnRpbnVlO1xuICAgICAgY29uc3QgZHggPSAobG9jYWxQbGF5ZXIubG9jYWxPcmlnaW4udmFsdWUueCAtIHgubG9jYWxPcmlnaW4udmFsdWUueCkgKiAwLjAyNTQ7XG4gICAgICBjb25zdCBkeSA9IChsb2NhbFBsYXllci5sb2NhbE9yaWdpbi52YWx1ZS55IC0geC5sb2NhbE9yaWdpbi52YWx1ZS55KSAqIDAuMDI1NDtcbiAgICAgIGNvbnN0IHIgPSBNYXRoLnNxcnQoTWF0aC5wb3coZHgsIDIpICsgTWF0aC5wb3coZHksIDIpKTtcbiAgICAgIGlmIChyIDwgdGhpcy5tYXhpbXVtRGlzdGFuY2UpIHtcbiAgICAgICAgY29uc3QgY29sb3IgPSBhcHAuQ29sb3IucGFyc2UoeC5jcmVhdGVDb2xvcihsb2NhbFBsYXllciwgbW9kZSksIDUwKTtcbiAgICAgICAgY29uc3QgdHlwZSA9IG5ldyBhcHAuRW50aXR5R2xvdygxMDEsIDEwMSwgNDYsIDkwKTtcbiAgICAgICAgaWYgKCFhcHAuc2hhbGxvd0VxdWFscyh4Lmdsb3dDb2xvci52YWx1ZSwgY29sb3IpIHx8ICFhcHAuc2hhbGxvd0VxdWFscyh4Lmdsb3dUeXBlLnZhbHVlLCB0eXBlKSB8fCB4Lmdsb3dFbmFibGUudmFsdWUgIT09IDEgfHwgeC5nbG93VGhyb3VnaFdhbGxzLnZhbHVlICE9PSAyKSB7XG4gICAgICAgICAgeC5nbG93Q29sb3IudmFsdWUgPSBjb2xvcjtcbiAgICAgICAgICB4Lmdsb3dUeXBlLnZhbHVlID0gdHlwZTtcbiAgICAgICAgICB4Lmdsb3dFbmFibGUudmFsdWUgPSAxO1xuICAgICAgICAgIHguZ2xvd1Rocm91Z2hXYWxscy52YWx1ZSA9IDI7IFxuICAgICAgICAgIHguVGhpcmRQZXJzb24udmFsdWUgPSAxO1xuICAgICAgICAgIHguVGhpcmRQZXJzb25hLnZhbHVlID0gMTtcbiAgICAgICAgICB4LklURU1HTE9XLnZhbHVlPSAxMzYzMTg0MjY1O1xuICAgICAgICAgIHBvaW50ZXJzLnB1c2goeC5nbG93Q29sb3IsIHguZ2xvd1R5cGUsIHguZ2xvd0VuYWJsZSwgeC5nbG93VGhyb3VnaFdhbGxzKTsgICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbiJdfQ==