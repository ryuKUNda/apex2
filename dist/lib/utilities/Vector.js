"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Vector = void 0;
const app = require("..");
const Math_1 = require("./Math");
class Vector {
    constructor(x, y, z) {
        this.x = x;
        this.y = y;
        this.z = z;
        this.x = x;
        this.y = y;
        this.z = z;
    }
    subtract(v) {
        return new Vector(this.x - v.x, this.y - v.y, this.z - v.z);
    }
    multiply(f) {
        return new Vector(this.x * f, this.y * f, this.z * f);
    }
    magnitude() {
        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
    }
    dotProduct(v) {
        return (this.x * v.x) + (this.y * v.y) + (this.z * v.z);
    }
    normalize() {
        const l = this.magnitude();
        if (l != 0) {
            this.x /= l;
            this.y /= l;
            this.z /= l;
        }
    }
    forward() {
        const cp = Math.cos((0, Math_1.DEG2RAD)(this.x));
        const sp = Math.sin((0, Math_1.DEG2RAD)(this.x));
        const cy = Math.cos((0, Math_1.DEG2RAD)(this.y));
        const sy = Math.sin((0, Math_1.DEG2RAD)(this.y));
        return new Vector(cp * cy, cp * sy, -sp);
    }
    angleBetween(v) {
        const dp = this.dotProduct(v);
        return Math.acos(dp);
    }
    static from(buffer) {
        const x = buffer.getFloat32(0, true);
        const y = buffer.getFloat32(4, true);
        const z = buffer.getFloat32(8, true);
        return new Vector(x, y, z);
    }
    toBuffer() {
        const buffer = new DataView(new ArrayBuffer(0xC));
        buffer.setFloat32(0, this.x, true);
        buffer.setFloat32(4, this.y, true);
        buffer.setFloat32(8, this.z, true);
        return buffer;
    }
    toString() {
        return app.serialize(this);
    }
}
exports.Vector = Vector;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVmVjdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2xpYi91dGlsaXRpZXMvVmVjdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLDBCQUEwQjtBQUMxQixpQ0FBaUM7QUFFakMsTUFBYSxNQUFNO0lBQ2pCLFlBQW1CLENBQVMsRUFBUyxDQUFTLEVBQVMsQ0FBUztRQUE3QyxNQUFDLEdBQUQsQ0FBQyxDQUFRO1FBQVMsTUFBQyxHQUFELENBQUMsQ0FBUTtRQUFTLE1BQUMsR0FBRCxDQUFDLENBQVE7UUFDNUQsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDWCxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNYLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2IsQ0FBQztJQUVILFFBQVEsQ0FBQyxDQUFTO1FBQ2hCLE9BQU8sSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM5RCxDQUFDO0lBRUQsUUFBUSxDQUFDLENBQVM7UUFDaEIsT0FBTyxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ3hELENBQUM7SUFFRCxTQUFTO1FBQ1AsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDeEUsQ0FBQztJQUVELFVBQVUsQ0FBQyxDQUFTO1FBQ2xCLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUQsQ0FBQztJQUVELFNBQVM7UUFDUCxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDM0IsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ1YsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDWixJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNaLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ2I7SUFDSCxDQUFDO0lBRUQsT0FBTztRQUNMLE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBQSxjQUFPLEVBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDckMsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFBLGNBQU8sRUFBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUVyQyxNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUEsY0FBTyxFQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3JDLE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBQSxjQUFPLEVBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFckMsT0FBTyxJQUFJLE1BQU0sQ0FBQyxFQUFFLEdBQUMsRUFBRSxFQUFFLEVBQUUsR0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUN2QyxDQUFDO0lBRUQsWUFBWSxDQUFDLENBQVM7UUFDcEIsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM5QixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDdkIsQ0FBQztJQUVELE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBZ0I7UUFDMUIsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDckMsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDckMsTUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDckMsT0FBTyxJQUFJLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQzdCLENBQUM7SUFFRCxRQUFRO1FBQ04sTUFBTSxNQUFNLEdBQUcsSUFBSSxRQUFRLENBQUMsSUFBSSxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUNsRCxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ25DLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDbkMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUNuQyxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDO0lBRUQsUUFBUTtRQUNOLE9BQU8sR0FBRyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM3QixDQUFDO0NBQ0Y7QUFqRUQsd0JBaUVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgYXBwIGZyb20gJy4uJztcbmltcG9ydCB7IERFRzJSQUQgfSBmcm9tICcuL01hdGgnO1xuXG5leHBvcnQgY2xhc3MgVmVjdG9yIHtcbiAgY29uc3RydWN0b3IocHVibGljIHg6IG51bWJlciwgcHVibGljIHk6IG51bWJlciwgcHVibGljIHo6IG51bWJlcikge1xuICAgICAgdGhpcy54ID0geDtcbiAgICAgIHRoaXMueSA9IHk7XG4gICAgICB0aGlzLnogPSB6O1xuICAgIH1cblxuICBzdWJ0cmFjdCh2OiBWZWN0b3IpIHtcbiAgICByZXR1cm4gbmV3IFZlY3Rvcih0aGlzLnggLSB2LngsIHRoaXMueSAtIHYueSwgdGhpcy56IC0gdi56KTtcbiAgfVxuXG4gIG11bHRpcGx5KGY6IG51bWJlcikge1xuICAgIHJldHVybiBuZXcgVmVjdG9yKHRoaXMueCAqIGYsIHRoaXMueSAqIGYsIHRoaXMueiAqIGYpO1xuICB9XG5cbiAgbWFnbml0dWRlKCkge1xuICAgIHJldHVybiBNYXRoLnNxcnQodGhpcy54ICogdGhpcy54ICsgdGhpcy55ICogdGhpcy55ICsgdGhpcy56ICogdGhpcy56KTtcbiAgfVxuXG4gIGRvdFByb2R1Y3QodjogVmVjdG9yKSB7XG4gICAgcmV0dXJuICh0aGlzLnggKiB2LngpICsgKHRoaXMueSAqIHYueSkgKyAodGhpcy56ICogdi56KTtcbiAgfVxuXG4gIG5vcm1hbGl6ZSgpIHtcbiAgICBjb25zdCBsID0gdGhpcy5tYWduaXR1ZGUoKTtcbiAgICBpZiAobCAhPSAwKSB7XG4gICAgICB0aGlzLnggLz0gbDtcbiAgICAgIHRoaXMueSAvPSBsO1xuICAgICAgdGhpcy56IC89IGw7XG4gICAgfVxuICB9XG5cbiAgZm9yd2FyZCgpIHtcbiAgICBjb25zdCBjcCA9IE1hdGguY29zKERFRzJSQUQodGhpcy54KSk7XG4gICAgY29uc3Qgc3AgPSBNYXRoLnNpbihERUcyUkFEKHRoaXMueCkpO1xuICAgIFxuICAgIGNvbnN0IGN5ID0gTWF0aC5jb3MoREVHMlJBRCh0aGlzLnkpKTtcbiAgICBjb25zdCBzeSA9IE1hdGguc2luKERFRzJSQUQodGhpcy55KSk7XG5cbiAgICByZXR1cm4gbmV3IFZlY3RvcihjcCpjeSwgY3Aqc3ksIC1zcCk7XG4gIH1cblxuICBhbmdsZUJldHdlZW4odjogVmVjdG9yKSB7XG4gICAgY29uc3QgZHAgPSB0aGlzLmRvdFByb2R1Y3Qodik7XG4gICAgcmV0dXJuIE1hdGguYWNvcyhkcCk7XG4gIH1cblxuICBzdGF0aWMgZnJvbShidWZmZXI6IERhdGFWaWV3KSB7XG4gICAgY29uc3QgeCA9IGJ1ZmZlci5nZXRGbG9hdDMyKDAsIHRydWUpO1xuICAgIGNvbnN0IHkgPSBidWZmZXIuZ2V0RmxvYXQzMig0LCB0cnVlKTtcbiAgICBjb25zdCB6ID0gYnVmZmVyLmdldEZsb2F0MzIoOCwgdHJ1ZSk7XG4gICAgcmV0dXJuIG5ldyBWZWN0b3IoeCwgeSwgeik7XG4gIH1cblxuICB0b0J1ZmZlcigpIHtcbiAgICBjb25zdCBidWZmZXIgPSBuZXcgRGF0YVZpZXcobmV3IEFycmF5QnVmZmVyKDB4QykpO1xuICAgIGJ1ZmZlci5zZXRGbG9hdDMyKDAsIHRoaXMueCwgdHJ1ZSk7XG4gICAgYnVmZmVyLnNldEZsb2F0MzIoNCwgdGhpcy55LCB0cnVlKTtcbiAgICBidWZmZXIuc2V0RmxvYXQzMig4LCB0aGlzLnosIHRydWUpO1xuICAgIHJldHVybiBidWZmZXI7XG4gIH1cbiAgXG4gIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiBhcHAuc2VyaWFsaXplKHRoaXMpO1xuICB9XG59XG4iXX0=