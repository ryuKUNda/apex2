"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Color = void 0;
const app = require("..");
class Color {
    constructor(r, g, b) {
        this.r = r;
        this.g = g;
        this.b = b;
    }
    static from(buffer) {
        const r = buffer.getFloat32(0, true);
        const g = buffer.getFloat32(4, true);
        const b = buffer.getFloat32(8, true);
        return new Color(r, g, b);
    }
    static parse(input, scale = 255) {
        const m = input.match(/^#?([0-9A-Z]{2})([0-9A-Z]{2})([0-9A-Z]{2})$/i);
        const r = parseInt(m[1], 16) / 255 * scale;
        const g = parseInt(m[2], 16) / 255 * scale;
        const b = parseInt(m[3], 16) / 255 * scale;
        return new Color(r, g, b);
    }
    toBuffer() {
        const buffer = new DataView(new ArrayBuffer(0xC));
        buffer.setFloat32(0, this.r, true);
        buffer.setFloat32(4, this.g, true);
        buffer.setFloat32(8, this.b, true);
        return buffer;
    }
    toString() {
        return app.serialize(this);
    }
}
exports.Color = Color;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29sb3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbGliL3V0aWxpdGllcy9Db2xvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSwwQkFBMEI7QUFFMUIsTUFBYSxLQUFLO0lBQ2hCLFlBQ1csQ0FBUyxFQUNULENBQVMsRUFDVCxDQUFTO1FBRlQsTUFBQyxHQUFELENBQUMsQ0FBUTtRQUNULE1BQUMsR0FBRCxDQUFDLENBQVE7UUFDVCxNQUFDLEdBQUQsQ0FBQyxDQUFRO0lBQUcsQ0FBQztJQUV4QixNQUFNLENBQUMsSUFBSSxDQUFDLE1BQWdCO1FBQzFCLE1BQU0sQ0FBQyxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ3JDLE1BQU0sQ0FBQyxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ3JDLE1BQU0sQ0FBQyxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ3JDLE9BQU8sSUFBSSxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUM1QixDQUFDO0lBRUQsTUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFhLEVBQUUsS0FBSyxHQUFHLEdBQUc7UUFDckMsTUFBTSxDQUFDLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyw4Q0FBOEMsQ0FBQyxDQUFDO1FBQ3RFLE1BQU0sQ0FBQyxHQUFHLFFBQVEsQ0FBQyxDQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLEdBQUcsR0FBRyxHQUFHLEtBQUssQ0FBQztRQUM1QyxNQUFNLENBQUMsR0FBRyxRQUFRLENBQUMsQ0FBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxHQUFHLEdBQUcsR0FBRyxLQUFLLENBQUM7UUFDNUMsTUFBTSxDQUFDLEdBQUcsUUFBUSxDQUFDLENBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsR0FBRyxHQUFHLEdBQUcsS0FBSyxDQUFDO1FBQzVDLE9BQU8sSUFBSSxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUM1QixDQUFDO0lBRUQsUUFBUTtRQUNOLE1BQU0sTUFBTSxHQUFHLElBQUksUUFBUSxDQUFDLElBQUksV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDbEQsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUNuQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ25DLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDbkMsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQztJQUVELFFBQVE7UUFDTixPQUFPLEdBQUcsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDN0IsQ0FBQztDQUNGO0FBaENELHNCQWdDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGFwcCBmcm9tICcuLic7XG5cbmV4cG9ydCBjbGFzcyBDb2xvciB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHJlYWRvbmx5IHI6IG51bWJlcixcbiAgICByZWFkb25seSBnOiBudW1iZXIsXG4gICAgcmVhZG9ubHkgYjogbnVtYmVyKSB7fVxuXG4gIHN0YXRpYyBmcm9tKGJ1ZmZlcjogRGF0YVZpZXcpIHtcbiAgICBjb25zdCByID0gYnVmZmVyLmdldEZsb2F0MzIoMCwgdHJ1ZSk7XG4gICAgY29uc3QgZyA9IGJ1ZmZlci5nZXRGbG9hdDMyKDQsIHRydWUpO1xuICAgIGNvbnN0IGIgPSBidWZmZXIuZ2V0RmxvYXQzMig4LCB0cnVlKTtcbiAgICByZXR1cm4gbmV3IENvbG9yKHIsIGcsIGIpO1xuICB9XG5cbiAgc3RhdGljIHBhcnNlKGlucHV0OiBzdHJpbmcsIHNjYWxlID0gMjU1KSB7XG4gICAgY29uc3QgbSA9IGlucHV0Lm1hdGNoKC9eIz8oWzAtOUEtWl17Mn0pKFswLTlBLVpdezJ9KShbMC05QS1aXXsyfSkkL2kpO1xuICAgIGNvbnN0IHIgPSBwYXJzZUludChtIVsxXSwgMTYpIC8gMjU1ICogc2NhbGU7XG4gICAgY29uc3QgZyA9IHBhcnNlSW50KG0hWzJdLCAxNikgLyAyNTUgKiBzY2FsZTtcbiAgICBjb25zdCBiID0gcGFyc2VJbnQobSFbM10sIDE2KSAvIDI1NSAqIHNjYWxlO1xuICAgIHJldHVybiBuZXcgQ29sb3IociwgZywgYik7XG4gIH1cblxuICB0b0J1ZmZlcigpIHtcbiAgICBjb25zdCBidWZmZXIgPSBuZXcgRGF0YVZpZXcobmV3IEFycmF5QnVmZmVyKDB4QykpO1xuICAgIGJ1ZmZlci5zZXRGbG9hdDMyKDAsIHRoaXMuciwgdHJ1ZSk7XG4gICAgYnVmZmVyLnNldEZsb2F0MzIoNCwgdGhpcy5nLCB0cnVlKTtcbiAgICBidWZmZXIuc2V0RmxvYXQzMig4LCB0aGlzLmIsIHRydWUpO1xuICAgIHJldHVybiBidWZmZXI7XG4gIH1cblxuICB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gYXBwLnNlcmlhbGl6ZSh0aGlzKTtcbiAgfVxufVxuIl19