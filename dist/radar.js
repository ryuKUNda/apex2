"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const app = require("./lib");
const ui_1 = require("./ui");
const canvas = document.querySelector('.canvas');
const frameTime = 1000 / 30;
const radar = new app.Radar(canvas);
canvas.addEventListener('dblclick', () => {
    (document.fullscreenElement
        ? document.exitFullscreen()
        : document.body.requestFullscreen()).catch();
});
(0, ui_1.ui)(x => renderAsync(x, new app.Sense(x)).finally(() => {
    canvas.height = 0;
    canvas.width = 0;
}));
async function renderAsync(core, sense) {
    while (true) {
        const beginTime = Date.now();
        const [levelName, players] = await Promise.all([core.levelNameAsync(), core.playersAsync()]);
        const localPlayer = players.find(x => x.isLocal);
        canvas.height = window.innerHeight;
        canvas.width = window.innerWidth;
        await Promise.all([
            renderFrame(levelName, localPlayer, players),
            senseAsync(localPlayer, players, sense),
            new Promise(x => setTimeout(x, frameTime - (Date.now() - beginTime)))
        ]);
    }
}
function renderFrame(levelName, localPlayer, players) {
    switch (levelName) {
        case 'mp_rr_canyonlands_staging':
            radar.refresh();
            if (!localPlayer)
                break;
            radar.renderOne(localPlayer, new app.Vector(31482.994140625, -6708.69677734375, 0), '#FFF');
            break;
        default:
            radar.refresh();
            if (!localPlayer)
                break;
            radar.renderAll(localPlayer, players);
            break;
    }
}
async function senseAsync(localPlayer, players, sense) {
    if (!localPlayer)
        return;
    if (!location.hash.includes('enable-sense'))
        return;
    await sense.updateAsync(localPlayer, players);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFkYXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvcmFkYXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSw2QkFBNkI7QUFDN0IsNkJBQXdCO0FBQ3hCLE1BQU0sTUFBTSxHQUF1QixRQUFRLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQ3JFLE1BQU0sU0FBUyxHQUFHLElBQUksR0FBRyxFQUFFLENBQUM7QUFDNUIsTUFBTSxLQUFLLEdBQUcsSUFBSSxHQUFHLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBRXBDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxVQUFVLEVBQUUsR0FBRyxFQUFFO0lBQ3ZDLENBQUMsUUFBUSxDQUFDLGlCQUFpQjtRQUN6QixDQUFDLENBQUMsUUFBUSxDQUFDLGNBQWMsRUFBRTtRQUMzQixDQUFDLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUM7QUFDakQsQ0FBQyxDQUFDLENBQUM7QUFFSCxJQUFBLE9BQUUsRUFBQyxDQUFDLENBQUMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxDQUFDLEVBQUUsSUFBSSxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRTtJQUNwRCxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztJQUNsQixNQUFNLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQztBQUNuQixDQUFDLENBQUMsQ0FBQyxDQUFDO0FBRUosS0FBSyxVQUFVLFdBQVcsQ0FBQyxJQUFjLEVBQUUsS0FBZ0I7SUFDekQsT0FBTyxJQUFJLEVBQUU7UUFDWCxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDN0IsTUFBTSxDQUFDLFNBQVMsRUFBRSxPQUFPLENBQUMsR0FBRyxNQUFNLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFLEVBQUUsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDLENBQUMsQ0FBQztRQUM3RixNQUFNLFdBQVcsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ2pELE1BQU0sQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDLFdBQVcsQ0FBQztRQUNuQyxNQUFNLENBQUMsS0FBSyxHQUFHLE1BQU0sQ0FBQyxVQUFVLENBQUM7UUFDakMsTUFBTSxPQUFPLENBQUMsR0FBRyxDQUFDO1lBQ2hCLFdBQVcsQ0FBQyxTQUFTLEVBQUUsV0FBVyxFQUFFLE9BQU8sQ0FBQztZQUM1QyxVQUFVLENBQUMsV0FBVyxFQUFFLE9BQU8sRUFBRSxLQUFLLENBQUM7WUFDdkMsSUFBSSxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsQ0FBQyxFQUFFLFNBQVMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDO1NBQ3RFLENBQUMsQ0FBQztLQUNKO0FBQ0gsQ0FBQztBQUVELFNBQVMsV0FBVyxDQUFDLFNBQXNCLEVBQUUsV0FBbUMsRUFBRSxPQUEwQjtJQUMxRyxRQUFRLFNBQVMsRUFBRTtRQUNqQixLQUFLLDJCQUEyQjtZQUM5QixLQUFLLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDaEIsSUFBSSxDQUFDLFdBQVc7Z0JBQUUsTUFBTTtZQUN4QixLQUFLLENBQUMsU0FBUyxDQUFDLFdBQVcsRUFBRSxJQUFJLEdBQUcsQ0FBQyxNQUFNLENBQUMsZUFBZSxFQUFFLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFDNUYsTUFBTTtRQUNSO1lBQ0UsS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQ2hCLElBQUksQ0FBQyxXQUFXO2dCQUFFLE1BQU07WUFDeEIsS0FBSyxDQUFDLFNBQVMsQ0FBQyxXQUFXLEVBQUUsT0FBTyxDQUFDLENBQUM7WUFDdEMsTUFBTTtLQUNUO0FBQ0gsQ0FBQztBQUNELEtBQUssVUFBVSxVQUFVLENBQUMsV0FBbUMsRUFBRSxPQUEwQixFQUFFLEtBQWdCO0lBQ3pHLElBQUksQ0FBQyxXQUFXO1FBQUUsT0FBTztJQUN6QixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsY0FBYyxDQUFDO1FBQUUsT0FBTztJQUNwRCxNQUFNLEtBQUssQ0FBQyxXQUFXLENBQUMsV0FBVyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQ2hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBhcHAgZnJvbSAnLi9saWInO1xuaW1wb3J0IHt1aX0gZnJvbSAnLi91aSc7XG5jb25zdCBjYW52YXMgPSA8SFRNTENhbnZhc0VsZW1lbnQ+IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jYW52YXMnKTtcbmNvbnN0IGZyYW1lVGltZSA9IDEwMDAgLyAzMDtcbmNvbnN0IHJhZGFyID0gbmV3IGFwcC5SYWRhcihjYW52YXMpO1xuXG5jYW52YXMuYWRkRXZlbnRMaXN0ZW5lcignZGJsY2xpY2snLCAoKSA9PiB7XG4gIChkb2N1bWVudC5mdWxsc2NyZWVuRWxlbWVudFxuICAgID8gZG9jdW1lbnQuZXhpdEZ1bGxzY3JlZW4oKVxuICAgIDogZG9jdW1lbnQuYm9keS5yZXF1ZXN0RnVsbHNjcmVlbigpKS5jYXRjaCgpO1xufSk7XG5cbnVpKHggPT4gcmVuZGVyQXN5bmMoeCwgbmV3IGFwcC5TZW5zZSh4KSkuZmluYWxseSgoKSA9PiB7XG4gIGNhbnZhcy5oZWlnaHQgPSAwO1xuICBjYW52YXMud2lkdGggPSAwO1xufSkpO1xuXG5hc3luYyBmdW5jdGlvbiByZW5kZXJBc3luYyhjb3JlOiBhcHAuQ29yZSwgc2Vuc2U6IGFwcC5TZW5zZSkge1xuICB3aGlsZSAodHJ1ZSkge1xuICAgIGNvbnN0IGJlZ2luVGltZSA9IERhdGUubm93KCk7XG4gICAgY29uc3QgW2xldmVsTmFtZSwgcGxheWVyc10gPSBhd2FpdCBQcm9taXNlLmFsbChbY29yZS5sZXZlbE5hbWVBc3luYygpLCBjb3JlLnBsYXllcnNBc3luYygpXSk7XG4gICAgY29uc3QgbG9jYWxQbGF5ZXIgPSBwbGF5ZXJzLmZpbmQoeCA9PiB4LmlzTG9jYWwpO1xuICAgIGNhbnZhcy5oZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQ7XG4gICAgY2FudmFzLndpZHRoID0gd2luZG93LmlubmVyV2lkdGg7XG4gICAgYXdhaXQgUHJvbWlzZS5hbGwoW1xuICAgICAgcmVuZGVyRnJhbWUobGV2ZWxOYW1lLCBsb2NhbFBsYXllciwgcGxheWVycyksXG4gICAgICBzZW5zZUFzeW5jKGxvY2FsUGxheWVyLCBwbGF5ZXJzLCBzZW5zZSksXG4gICAgICBuZXcgUHJvbWlzZSh4ID0+IHNldFRpbWVvdXQoeCwgZnJhbWVUaW1lIC0gKERhdGUubm93KCkgLSBiZWdpblRpbWUpKSlcbiAgICBdKTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZW5kZXJGcmFtZShsZXZlbE5hbWU6IGFwcC5DU3RyaW5nLCBsb2NhbFBsYXllcjogYXBwLlBsYXllciB8IHVuZGVmaW5lZCwgcGxheWVyczogQXJyYXk8YXBwLlBsYXllcj4pIHtcbiAgc3dpdGNoIChsZXZlbE5hbWUpIHtcbiAgICBjYXNlICdtcF9ycl9jYW55b25sYW5kc19zdGFnaW5nJzpcbiAgICAgIHJhZGFyLnJlZnJlc2goKTtcbiAgICAgIGlmICghbG9jYWxQbGF5ZXIpIGJyZWFrO1xuICAgICAgcmFkYXIucmVuZGVyT25lKGxvY2FsUGxheWVyLCBuZXcgYXBwLlZlY3RvcigzMTQ4Mi45OTQxNDA2MjUsIC02NzA4LjY5Njc3NzM0Mzc1LCAwKSwgJyNGRkYnKTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICByYWRhci5yZWZyZXNoKCk7XG4gICAgICBpZiAoIWxvY2FsUGxheWVyKSBicmVhaztcbiAgICAgIHJhZGFyLnJlbmRlckFsbChsb2NhbFBsYXllciwgcGxheWVycyk7XG4gICAgICBicmVhaztcbiAgfVxufVxuYXN5bmMgZnVuY3Rpb24gc2Vuc2VBc3luYyhsb2NhbFBsYXllcjogYXBwLlBsYXllciB8IHVuZGVmaW5lZCwgcGxheWVyczogQXJyYXk8YXBwLlBsYXllcj4sIHNlbnNlOiBhcHAuU2Vuc2UpIHtcbiAgaWYgKCFsb2NhbFBsYXllcikgcmV0dXJuO1xuICBpZiAoIWxvY2F0aW9uLmhhc2guaW5jbHVkZXMoJ2VuYWJsZS1zZW5zZScpKSByZXR1cm47XG4gIGF3YWl0IHNlbnNlLnVwZGF0ZUFzeW5jKGxvY2FsUGxheWVyLCBwbGF5ZXJzKTtcbn1cbiJdfQ==