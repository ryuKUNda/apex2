"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const app = require("./lib");
const ui_1 = require("./ui");
const container = document.querySelector('.container');
const content = document.querySelector('.content');
const frameTime = 1000 / 10;
(0, ui_1.ui)((x) => {
    container.style.display = 'inherit';
    content.textContent = 'Sense running. Keep this window open.';
    return renderAsync(x, new app.Sense(x));
});
async function renderAsync(core, sense) {
    while (true) {
        const beginTime = Date.now();
        const players = await core.playersAsync();
        const localPlayer = players.find(x => x.isLocal);
        if (localPlayer)
            await sense.updateAsync(localPlayer, players);
        await new Promise(x => setTimeout(x, frameTime - (Date.now() - beginTime)));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Vuc2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvc2Vuc2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSw2QkFBNkI7QUFDN0IsNkJBQXdCO0FBQ3hCLE1BQU0sU0FBUyxHQUFpQixRQUFRLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQyxDQUFDO0FBQ3JFLE1BQU0sT0FBTyxHQUFpQixRQUFRLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQ2pFLE1BQU0sU0FBUyxHQUFHLElBQUksR0FBRyxFQUFFLENBQUM7QUFFNUIsSUFBQSxPQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRTtJQUNQLFNBQVMsQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLFNBQVMsQ0FBQztJQUNwQyxPQUFPLENBQUMsV0FBVyxHQUFHLHVDQUF1QyxDQUFDO0lBQzlELE9BQU8sV0FBVyxDQUFDLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMxQyxDQUFDLENBQUMsQ0FBQztBQUVILEtBQUssVUFBVSxXQUFXLENBQUMsSUFBYyxFQUFFLEtBQWdCO0lBQ3pELE9BQU8sSUFBSSxFQUFFO1FBQ1gsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBQzdCLE1BQU0sT0FBTyxHQUFHLE1BQU0sSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO1FBQzFDLE1BQU0sV0FBVyxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDakQsSUFBSSxXQUFXO1lBQUUsTUFBTSxLQUFLLENBQUMsV0FBVyxDQUFDLFdBQVcsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUMvRCxNQUFNLElBQUksT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLENBQUMsRUFBRSxTQUFTLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQzdFO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGFwcCBmcm9tICcuL2xpYic7XG5pbXBvcnQge3VpfSBmcm9tICcuL3VpJztcbmNvbnN0IGNvbnRhaW5lciA9IDxIVE1MRWxlbWVudD4gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNvbnRhaW5lcicpO1xuY29uc3QgY29udGVudCA9IDxIVE1MRWxlbWVudD4gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNvbnRlbnQnKTtcbmNvbnN0IGZyYW1lVGltZSA9IDEwMDAgLyAxMDtcblxudWkoKHgpID0+IHtcbiAgY29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSAnaW5oZXJpdCc7XG4gIGNvbnRlbnQudGV4dENvbnRlbnQgPSAnU2Vuc2UgcnVubmluZy4gS2VlcCB0aGlzIHdpbmRvdyBvcGVuLic7XG4gIHJldHVybiByZW5kZXJBc3luYyh4LCBuZXcgYXBwLlNlbnNlKHgpKTtcbn0pO1xuXG5hc3luYyBmdW5jdGlvbiByZW5kZXJBc3luYyhjb3JlOiBhcHAuQ29yZSwgc2Vuc2U6IGFwcC5TZW5zZSkge1xuICB3aGlsZSAodHJ1ZSkge1xuICAgIGNvbnN0IGJlZ2luVGltZSA9IERhdGUubm93KCk7XG4gICAgY29uc3QgcGxheWVycyA9IGF3YWl0IGNvcmUucGxheWVyc0FzeW5jKCk7XG4gICAgY29uc3QgbG9jYWxQbGF5ZXIgPSBwbGF5ZXJzLmZpbmQoeCA9PiB4LmlzTG9jYWwpO1xuICAgIGlmIChsb2NhbFBsYXllcikgYXdhaXQgc2Vuc2UudXBkYXRlQXN5bmMobG9jYWxQbGF5ZXIsIHBsYXllcnMpO1xuICAgIGF3YWl0IG5ldyBQcm9taXNlKHggPT4gc2V0VGltZW91dCh4LCBmcmFtZVRpbWUgLSAoRGF0ZS5ub3coKSAtIGJlZ2luVGltZSkpKTtcbiAgfVxufVxuIl19