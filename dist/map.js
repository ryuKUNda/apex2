"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const app = require("./lib");
const ui_1 = require("./ui");
const canvas = document.querySelector('.canvas');
const frameTime = 1000 / 10;
const map = new app.Map(canvas);
canvas.addEventListener('dblclick', () => {
    (document.fullscreenElement
        ? document.exitFullscreen()
        : document.body.requestFullscreen()).catch();
});
(0, ui_1.ui)(x => renderAsync(x, new app.Sense(x)).finally(() => {
    canvas.height = 0;
    canvas.width = 0;
}));
async function renderAsync(core, sense) {
    while (true) {
        const beginTime = Date.now();
        const [levelName, players] = await Promise.all([core.levelNameAsync(), core.playersAsync()]);
        const localPlayer = players.find(x => x.isLocal);
        canvas.height = window.innerHeight;
        canvas.width = window.innerWidth;
        await Promise.all([
            renderFrame(levelName, localPlayer, players),
            senseAsync(localPlayer, players, sense),
            new Promise(x => setTimeout(x, frameTime - (Date.now() - beginTime)))
        ]);
    }
}
function renderFrame(levelName, localPlayer, players) {
    map.refresh(levelName);
    if (!localPlayer)
        return;
    map.renderAll(localPlayer, players);
}
async function senseAsync(localPlayer, players, sense) {
    if (!localPlayer)
        return;
    if (!location.hash.includes('enable-sense'))
        return;
    await sense.updateAsync(localPlayer, players);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL21hcC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDZCQUE2QjtBQUM3Qiw2QkFBd0I7QUFDeEIsTUFBTSxNQUFNLEdBQXVCLFFBQVEsQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDckUsTUFBTSxTQUFTLEdBQUcsSUFBSSxHQUFHLEVBQUUsQ0FBQztBQUM1QixNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7QUFFaEMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLFVBQVUsRUFBRSxHQUFHLEVBQUU7SUFDdkMsQ0FBQyxRQUFRLENBQUMsaUJBQWlCO1FBQ3pCLENBQUMsQ0FBQyxRQUFRLENBQUMsY0FBYyxFQUFFO1FBQzNCLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztBQUNqRCxDQUFDLENBQUMsQ0FBQztBQUVILElBQUEsT0FBRSxFQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsV0FBVyxDQUFDLENBQUMsRUFBRSxJQUFJLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFO0lBQ3BELE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO0lBQ2xCLE1BQU0sQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO0FBQ25CLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFFSixLQUFLLFVBQVUsV0FBVyxDQUFDLElBQWMsRUFBRSxLQUFnQjtJQUN6RCxPQUFPLElBQUksRUFBRTtRQUNYLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUM3QixNQUFNLENBQUMsU0FBUyxFQUFFLE9BQU8sQ0FBQyxHQUFHLE1BQU0sT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUUsRUFBRSxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQzdGLE1BQU0sV0FBVyxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDakQsTUFBTSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsV0FBVyxDQUFDO1FBQ25DLE1BQU0sQ0FBQyxLQUFLLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQztRQUNqQyxNQUFNLE9BQU8sQ0FBQyxHQUFHLENBQUM7WUFDaEIsV0FBVyxDQUFDLFNBQVMsRUFBRSxXQUFXLEVBQUUsT0FBTyxDQUFDO1lBQzVDLFVBQVUsQ0FBQyxXQUFXLEVBQUUsT0FBTyxFQUFFLEtBQUssQ0FBQztZQUN2QyxJQUFJLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxDQUFDLEVBQUUsU0FBUyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUM7U0FDdEUsQ0FBQyxDQUFDO0tBQ0o7QUFDSCxDQUFDO0FBRUQsU0FBUyxXQUFXLENBQUMsU0FBc0IsRUFBRSxXQUFtQyxFQUFFLE9BQTBCO0lBQzFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDdkIsSUFBSSxDQUFDLFdBQVc7UUFBRSxPQUFPO0lBQ3pCLEdBQUcsQ0FBQyxTQUFTLENBQUMsV0FBVyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQ3RDLENBQUM7QUFFRCxLQUFLLFVBQVUsVUFBVSxDQUFDLFdBQW1DLEVBQUUsT0FBMEIsRUFBRSxLQUFnQjtJQUN6RyxJQUFJLENBQUMsV0FBVztRQUFFLE9BQU87SUFDekIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQztRQUFFLE9BQU87SUFDcEQsTUFBTSxLQUFLLENBQUMsV0FBVyxDQUFDLFdBQVcsRUFBRSxPQUFPLENBQUMsQ0FBQztBQUNoRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgYXBwIGZyb20gJy4vbGliJztcbmltcG9ydCB7dWl9IGZyb20gJy4vdWknO1xuY29uc3QgY2FudmFzID0gPEhUTUxDYW52YXNFbGVtZW50PiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY2FudmFzJyk7XG5jb25zdCBmcmFtZVRpbWUgPSAxMDAwIC8gMTA7XG5jb25zdCBtYXAgPSBuZXcgYXBwLk1hcChjYW52YXMpO1xuXG5jYW52YXMuYWRkRXZlbnRMaXN0ZW5lcignZGJsY2xpY2snLCAoKSA9PiB7XG4gIChkb2N1bWVudC5mdWxsc2NyZWVuRWxlbWVudFxuICAgID8gZG9jdW1lbnQuZXhpdEZ1bGxzY3JlZW4oKVxuICAgIDogZG9jdW1lbnQuYm9keS5yZXF1ZXN0RnVsbHNjcmVlbigpKS5jYXRjaCgpO1xufSk7XG5cbnVpKHggPT4gcmVuZGVyQXN5bmMoeCwgbmV3IGFwcC5TZW5zZSh4KSkuZmluYWxseSgoKSA9PiB7XG4gIGNhbnZhcy5oZWlnaHQgPSAwO1xuICBjYW52YXMud2lkdGggPSAwO1xufSkpO1xuXG5hc3luYyBmdW5jdGlvbiByZW5kZXJBc3luYyhjb3JlOiBhcHAuQ29yZSwgc2Vuc2U6IGFwcC5TZW5zZSkge1xuICB3aGlsZSAodHJ1ZSkge1xuICAgIGNvbnN0IGJlZ2luVGltZSA9IERhdGUubm93KCk7XG4gICAgY29uc3QgW2xldmVsTmFtZSwgcGxheWVyc10gPSBhd2FpdCBQcm9taXNlLmFsbChbY29yZS5sZXZlbE5hbWVBc3luYygpLCBjb3JlLnBsYXllcnNBc3luYygpXSk7XG4gICAgY29uc3QgbG9jYWxQbGF5ZXIgPSBwbGF5ZXJzLmZpbmQoeCA9PiB4LmlzTG9jYWwpO1xuICAgIGNhbnZhcy5oZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQ7XG4gICAgY2FudmFzLndpZHRoID0gd2luZG93LmlubmVyV2lkdGg7XG4gICAgYXdhaXQgUHJvbWlzZS5hbGwoW1xuICAgICAgcmVuZGVyRnJhbWUobGV2ZWxOYW1lLCBsb2NhbFBsYXllciwgcGxheWVycyksXG4gICAgICBzZW5zZUFzeW5jKGxvY2FsUGxheWVyLCBwbGF5ZXJzLCBzZW5zZSksXG4gICAgICBuZXcgUHJvbWlzZSh4ID0+IHNldFRpbWVvdXQoeCwgZnJhbWVUaW1lIC0gKERhdGUubm93KCkgLSBiZWdpblRpbWUpKSlcbiAgICBdKTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZW5kZXJGcmFtZShsZXZlbE5hbWU6IGFwcC5DU3RyaW5nLCBsb2NhbFBsYXllcjogYXBwLlBsYXllciB8IHVuZGVmaW5lZCwgcGxheWVyczogQXJyYXk8YXBwLlBsYXllcj4pIHtcbiAgbWFwLnJlZnJlc2gobGV2ZWxOYW1lKTtcbiAgaWYgKCFsb2NhbFBsYXllcikgcmV0dXJuO1xuICBtYXAucmVuZGVyQWxsKGxvY2FsUGxheWVyLCBwbGF5ZXJzKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gc2Vuc2VBc3luYyhsb2NhbFBsYXllcjogYXBwLlBsYXllciB8IHVuZGVmaW5lZCwgcGxheWVyczogQXJyYXk8YXBwLlBsYXllcj4sIHNlbnNlOiBhcHAuU2Vuc2UpIHtcbiAgaWYgKCFsb2NhbFBsYXllcikgcmV0dXJuO1xuICBpZiAoIWxvY2F0aW9uLmhhc2guaW5jbHVkZXMoJ2VuYWJsZS1zZW5zZScpKSByZXR1cm47XG4gIGF3YWl0IHNlbnNlLnVwZGF0ZUFzeW5jKGxvY2FsUGxheWVyLCBwbGF5ZXJzKTtcbn1cbiJdfQ==